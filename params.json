{
  "name": "Stefano-tree",
  "tagline": "PHP library which store hierarchical tree structures into database",
  "body": "# Tree\r\n\r\n| Test Status | Code Coverage | Quality | Dependencies |\r\n| :---: | :---: | :---: | :---: |\r\n| [![Test Status](https://secure.travis-ci.org/bartko-s/stefano-tree.png?branch=master)](https://travis-ci.org/bartko-s/stefano-tree) | [![Code Coverage](https://coveralls.io/repos/bartko-s/stefano-tree/badge.png?branch=master)](https://coveralls.io/r/bartko-s/stefano-tree?branch=master) | [![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/bartko-s/stefano-tree/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/bartko-s/stefano-tree/?branch=master) | [![Dependency Status](https://www.versioneye.com/user/projects/53d26035851c5679c9000267/badge.svg?style=flat)](https://www.versioneye.com/user/projects/53d26035851c5679c9000267) |\r\n\r\nThis library is implementation of [Nested Set](https://en.wikipedia.org/wiki/Nested_set_model) pattern for PHP.\r\n\r\n## Features\r\n\r\n - NestedSet(MPTT - Modified Preorder Tree Traversal)\r\n - Tested with MySQL and PostgreSQL but should work with any database vendor which support transaction\r\n\r\n## Dependencies\r\n\r\n- Optional [Stefano DB](https://github.com/bartko-s/stefano-db) This repository is 100% compatible with Zend Framework 2 DB package\r\n- Optional [Doctrine DBAL](https://github.com/doctrine/dbal)\r\n- Optional [Zend Framework 1 - Db package](https://github.com/zf1/zend-db.git)\r\n\r\n## Installation using Composer\r\n\r\n1. Add following line to your composer.json file  ``` \"stefano/stefano-tree\": \"~1.0.0\" ```\r\n2. Add following line to your composer.json file ``` \"doctrine/dbal\": \"2.*\" ``` if you want to use this library with Doctrine DBAL\r\n3. Add following line to your composer.json file ``` \"stefano/stefano-db\": \"~1.4.0\" ``` if you want to use this library with Stefano DB\r\n4. Add following line to your composer.json file ``` \"zf1/zend-db\": \"*\" ``` if you want to use this library with Zend Framework 1\r\n5. Create db scheme [example db scheme](https://github.com/bartko-s/stefano-tree/tree/master/sql)\r\n\r\n## Usage\r\n\r\n\r\n### Create tree adapter\r\n\r\n- Use static factory method\r\n\r\n```\r\n$options = new \\StefanoTree\\NestedSet\\Options(array(\r\n    'tableName'    => 'tree_traversal', //required\r\n    'idColumnName' => 'tree_traversal_id', //required\r\n    'leftColumnName' => 'lft', //optional (default lft)\r\n    'rightColumnName' => 'rgt', //optional (default rgt)\r\n    'levelColumnName' => 'level', //optional (default level)\r\n    'parentIdColumnName' => 'parent_id', //optional (default parent_id)\r\n    'sequenceName' => 'sequence_name_seq', //required for PostgreSQL\r\n    'scopeColumnName' => 'scope', //optional\r\n));\r\n\r\n// One of this\r\n//Stefano Db\r\n$dbAdapter = new \\StefanoDb\\Adapter\\Adapter(...);\r\n// or Doctrine DBAL\r\n$dbAdapter = new \\Doctrine\\DBAL\\Connection(...);\r\n// or Zend 1 DB package\r\n$dbAdapter = Zend_Db::factory(...)\r\n\r\n\r\n$tree = \\StefanoTree\\NestedSet::factory($options, $dbAdapter);\r\n```\r\n\r\n- or create tree adapter directly\r\n\r\n```\r\n$options = new \\StefanoTree\\NestedSet\\Options(array(...);\r\n\r\n$dbAdapter = new \\StefanoDb\\Adapter\\Adapter(array(...));\r\n\r\n$nestedSetAdapter = new \\StefanoTree\\NestedSet\\Adapter\\Zend2DbAdapter($options, $dbAdapter);\r\n\r\n$tree = new \\StefanoTree\\NestedSet($nestedSetAdapter);\r\n```\r\n\r\n- You can join table\r\n```\r\n$defaultDbSelect = $nestedSetAdapter->getDefaultDbSelect();\r\n\r\n//zend framework select object\r\n//http://framework.zend.com/manual/2.2/en/modules/zend.db.sql.html#join\r\n$defaultDbSelect->join($name, $on, $columns, $type);\r\n$nestedSetAdapter->setDefaultDbSelect($defaultDbSelect);\r\n```\r\n\r\n### Creating nodes\r\n\r\n- Create root node\r\n\r\n```\r\n// create root node. Scope support is disabled\r\n$tree->createRootNode(array());\r\n\r\n// create root node. Scope support is enabled\r\n$tree->createRootNode(array(), $scope);\r\n```\r\n\r\n- Create new node\r\n\r\n```\r\n$targetNodeId = 10;\r\n\r\n$data = array(\r\n    //data\r\n);\r\n\r\n$tree->addNodePlacementBottom($targetNodeId, $data);\r\n$tree->addNodePlacementTop($targetNodeId, $data);\r\n$tree->addNodePlacementChildBottom($targetNodeId, $data);\r\n$tree->addNodePlacementTop($targetNodeId, $data);\r\n```\r\n\r\n### Update Node\r\n\r\n```\r\n$targetNodeId = 10;\r\n\r\n$data = array(\r\n    //data\r\n);\r\n\r\n$tree->updateNode($targetNodeId, $data);\r\n```\r\n\r\n### Move node\r\n\r\n```\r\n$sourceNodeId = 15;\r\n$targetNodeId = 10;\r\n\r\n$tree->moveNodePlacementBottom($sourceNodeId, $targetNodeId);\r\n$tree->moveNodePlacementTop($sourceNodeId, $targetNodeId);\r\n$tree->moveNodePlacementChildBottom($sourceNodeId, $targetNodeId);\r\n$tree->moveNodePlacementChildTop($sourceNodeId, $targetNodeId);\r\n```\r\n\r\n### Delete node or branch\r\n\r\n```\r\n$nodeId = 15;\r\n\r\n$tree->deleteBranch($nodeId);\r\n```\r\n\r\n### Getting nodes\r\n\r\n- Get all children\r\n\r\n```\r\n$nodeId = 15;\r\n$tree->getChildren($nodeId);\r\n```\r\n\r\n- Get all descendants\r\n\r\n```\r\n$nodeId = 15;\r\n\r\n//all descedants\r\n$tree->getDescendants($nodeId);\r\n\r\n//exclude node $nodeId from result\r\n$tree->getDescendants($nodeId, 1);\r\n\r\n//exclude first two levels from result\r\n$tree->getDescendants($nodeId, 2);\r\n\r\n//get four levels\r\n$tree->getDescendants($nodeId, 0, 4);\r\n```\r\n\r\n- Exclude branche from  result\r\n\r\n```\r\n$nodeId = 15;\r\n$excludeBranche = 22;\r\n$tree->getDescendants($nodeId, 0, null, $excludeBranche);\r\n```\r\n\r\n- Get Path\r\n\r\n```\r\n$nodeId = 15;\r\n\r\n//full path\r\n$tree->getPath($nodeId);\r\n\r\n//exclude node $nodeId from result\r\n$tree->getPath($nodeId, 1);\r\n\r\n//exclude first two levels from result\r\n$tree->getPath($nodeId, 2);\r\n\r\n//exclude last node\r\n$tree->getPath($nodeId, 0, true);\r\n```\r\n\r\n### Validation and Rebuild broken tree\r\n\r\n- Check if tree is valid\r\n\r\n```\r\n$tree->isValid($rootNodeId);\r\n```\r\n\r\n- Rebuild broken tree\r\n\r\n```\r\n$tree->rebuild($rootNodeId);\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}